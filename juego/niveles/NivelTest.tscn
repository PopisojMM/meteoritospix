[gd_scene load_steps=13 format=2]

[ext_resource path="res://juego/Naves/Player/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://juego/niveles/Nivel.gd" type="Script" id=2]
[ext_resource path="res://default_env.tres" type="Environment" id=3]
[ext_resource path="res://juego/Explosiones/Explosion.tscn" type="PackedScene" id=4]
[ext_resource path="res://juego/Meteoritos/SectorMeteoritos.tscn" type="PackedScene" id=5]
[ext_resource path="res://juego/Meteoritos/Meteorito.tscn" type="PackedScene" id=6]
[ext_resource path="res://juego/Explosiones/ExplosionMeteorito.tscn" type="PackedScene" id=7]
[ext_resource path="res://juego/Naves/Estaciones/EstacionRecarga.tscn" type="PackedScene" id=8]
[ext_resource path="res://juego/Peligros/SectorDePeligro.tscn" type="PackedScene" id=9]
[ext_resource path="res://recursos/Backgrounds/darkPurple.png" type="Texture" id=10]
[ext_resource path="res://juego/niveles/CamaraJuego.gd" type="Script" id=11]

[sub_resource type="GDScript" id=1]
script/source = "class_name NaveBase
extends RigidBody2D

# Enums
enum ESTADO {SPAWN, VIVO, INVENCIBLE, MUERTO}

## Atributos Exportados
export var potencia_motor:int = 20
export var potencia_rotacion:int = 280
export var estela_maxima:int = 150
export var hitpoints:float = 20.0

## Atributos
var empuje:Vector2 = Vector2.ZERO
var dir_rotacion:int = 0
var estado_actual:int = ESTADO.SPAWN

## Atributos Onready
onready var canion:Canion = $Canion
onready var laser:RayoLaser = $LaserBeam2D setget ,get_laser
onready var estela:Estela = $EstelaPuntoInicio/Trail2D
onready var motor_sfx:Motor = $MotorSFX
onready var colisionador:CollisionShape2D = $CollisionShape2D
onready var impactos_sfx:AudioStreamPlayer = $ImpactosSFX
onready var escudo:Escudo = $Escudo setget ,get_escudo

## Setters y Getters
func get_laser() -> RayoLaser:
	return laser

func get_escudo() -> Escudo:
	return escudo


## Metodos
func _ready() -> void:
	controlador_estados(estado_actual)

func _unhandled_input(event: InputEvent) -> void:
	if not esta_input_activo():
		return
	# Disparar Rayo
	if event.is_action_pressed(\"disparo_secundario\"):
		laser.set_is_casting(true)
	
	if event.is_action_released(\"disparo_secundario\"):
		laser.set_is_casting(false)
	# Control Estela y sonido motor
	if event.is_action_pressed(\"mover_adelante\"):
		estela.set_max_points(estela_maxima)
		motor_sfx.sonido_on()
	elif event.is_action_pressed(\"mover_atras\"):
		estela.set_max_points(0)
		motor_sfx.sonido_on()
		
	if (event.is_action_released(\"mover_adelante\") or event.is_action_released(\"mover_atras\")):
		motor_sfx.sonido_off()
	# Control Escudo
	if event.is_action_pressed(\"escudo\") and not escudo.get_esta_activado():
		escudo.activar()

func _integrate_forces(state: Physics2DDirectBodyState) -> void:
	apply_central_impulse(empuje.rotated(rotation))
	apply_torque_impulse(dir_rotacion * potencia_rotacion)

func _process(delta: float) -> void:
	player_input()

## Metodos Custom
func controlador_estados(nuevo_estado: int) -> void:
	match nuevo_estado:
		ESTADO.SPAWN:
			colisionador.set_deferred(\"disabled\", true)
			canion.set_puede_disparar(false)
		ESTADO.VIVO:
			colisionador.set_deferred(\"disabled\", false)
			canion.set_puede_disparar(true)
		ESTADO.INVENCIBLE:
			colisionador.set_deferred(\"disabled\", true)
			canion.set_puede_disparar(true)
			queue_free()
		ESTADO.MUERTO:
			colisionador.set_deferred(\"disabled\", true)
			canion.set_puede_disparar(false)
			Eventos.emit_signal(\"nave_destruida\", self, global_position)
			queue_free()
		_:
			printerr(\"Error de estado\")
	estado_actual = nuevo_estado

func player_input() -> void:
	if not esta_input_activo():
		return
	# Empuje
	empuje = Vector2.ZERO
	if Input.is_action_pressed(\"mover_adelante\"):
		empuje = Vector2(potencia_motor, 0)
	elif Input.is_action_pressed(\"mover_atras\"):
		empuje = Vector2(-potencia_motor, 0)
	
	# Rotacion
	dir_rotacion = 0
	if Input.is_action_pressed(\"rotar_antihorario\"):
		dir_rotacion -= 1
	elif Input.is_action_pressed(\"rotar_horario\"):
		dir_rotacion += 1
	
	# Disparo
	if Input.is_action_pressed(\"disparo_principal\"):
		canion.set_esta_disparando(true)
	if Input.is_action_just_released(\"disparo_principal\"):
		canion.set_esta_disparando(false)

func esta_input_activo() -> bool:
	if estado_actual in [ESTADO.MUERTO, ESTADO.SPAWN]:
		return false
	return true

func destruir() -> void:
	controlador_estados(ESTADO.MUERTO)

func recibir_danio(danio:float) -> void:
	hitpoints -= danio
	if hitpoints <= 0.0:
		destruir()
	impactos_sfx.play()

## SeÃ±ales internas
func _on_AnimationPlayer_animation_finished(anim_name: String) -> void:
	if anim_name ==\"spawn\":
		controlador_estados(ESTADO.VIVO)

func _on_body_entered(body):
	if body is Meteorito:
		body.destruir()
		destruir()
"

[node name="NivelTest" type="Node2D"]
script = ExtResource( 2 )
explosion = ExtResource( 4 )
meteorito = ExtResource( 6 )
explosion_meteorito = ExtResource( 7 )
sector_meteoritos = ExtResource( 5 )
tiempo_transicion_camara = 2.0

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource( 3 )

[node name="Player" parent="." instance=ExtResource( 1 )]
position = Vector2( 332.619, 163.79 )
script = SubResource( 1 )

[node name="TriggersLLuviaMeteoritos" type="Node" parent="."]

[node name="SectorDePeligro" parent="TriggersLLuviaMeteoritos" instance=ExtResource( 9 )]
position = Vector2( 1504.44, 542.445 )
tipo_peligro = "Meteorito"
numero_peligros = 2

[node name="ContenedorEstaciones" type="Node" parent="."]

[node name="EstacionRecarga" parent="ContenedorEstaciones" instance=ExtResource( 8 )]

[node name="CamaraNivel" type="Camera2D" parent="."]
script = ExtResource( 11 )

[node name="TweenZoom" type="Tween" parent="CamaraNivel"]

[node name="TweenCamara" type="Tween" parent="."]

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
scroll_ignore_camera_zoom = true

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_mirroring = Vector2( 256, 256 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground"]
scale = Vector2( 256, 256 )
texture = ExtResource( 10 )

[connection signal="tween_completed" from="TweenCamara" to="." method="_on_TweenCamara_tween_completed"]
